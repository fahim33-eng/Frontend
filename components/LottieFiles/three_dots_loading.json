{"v":"4.8.0","meta":{"g":"LottieFiles AE 3.4.5","a":"","k":"","d":"","tc":""},"fr":60,"ip":0,"op":151,"w":500,"h":500,"nm":"Bolletjes - 2","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Bol 3 Outlines","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0,"y":1},"o":{"x":0.167,"y":0},"t":10,"s":[381.37,256.479,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.433},"o":{"x":0.616,"y":0},"t":30,"s":[381.37,116.479,0],"to":[0,0,0],"ti":[0,0,0]},{"t":50,"s":[381.37,256.479,0]}],"ix":2,"x":"var $bm_rt;\nvar fx, e, g, e, g, e, g, e, g, e, g, e, g, pos, p, pos, p, fps, nMax, n, n, hitData, t, v, vl, vu, vu, tCur, segDur, tNext, nb, curSeg, curSeg, curSeg, curSeg, curSeg, curSeg, delta, res, curSeg;\ntry {\n    fx = effect('Bounce Settings');\n    switch (fx('Gravity Presets').value) {\n    case 1:\n        e = 0.6;\n        g = 3000;\n        break;\n    case 2:\n        e = 0.6;\n        g = 4000;\n        break;\n    case 3:\n        e = 0.5;\n        g = 5000;\n        break;\n    case 4:\n        e = 0.45;\n        g = 7000;\n        break;\n    case 5:\n        e = 0.4;\n        g = 10000;\n        break;\n    default:\n        e = $bm_div(fx('Elasticity'), 10);\n        g = $bm_mul(fx('Gravity'), 1000);\n    }\n    try {\n        pos = transform.yPosition;\n        p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n        pos.key(pos.numKeys).time;\n    } catch (e$$4) {\n        pos = transform.position;\n        p = [\n            $bm_sum(fx('Position X'), fx('Offset X')),\n            $bm_sum(fx('Position Y'), fx('Offset Y'))\n        ];\n    }\n    fps = thisComp.frameDuration;\n    nMax = fx('Max Bounce');\n    $bm_rt = n = 0;\n    if (numKeys > 0) {\n        $bm_rt = n = nearestKey(time).index;\n        if (key(n).time > time)\n            n--;\n    }\n    if (n > 0 && fx('Enable') == 1) {\n        hitData = [];\n        t = $bm_sub(time, key(n).time);\n        v = $bm_mul($bm_neg(velocityAtTime($bm_sub(key(n).time, 0.001))), e);\n        vl = length(v);\n        if ($bm_isInstanceOfArray(value)) {\n            vu = vl > 0 ? normalize(v) : [\n                0,\n                0,\n                0\n            ];\n        } else {\n            vu = v < 0 ? -1 : 1;\n        }\n        tCur = 0;\n        segDur = $bm_div($bm_mul(2, vl), g);\n        tNext = segDur;\n        nb = 1;\n        hitData.push(segDur);\n        if ($bm_mod(n, 2) == 0) {\n            n > 1 ? curSeg = $bm_sub(pos.key(n).time, 0.01) : curSeg = $bm_sub(pos.key(pos.numKeys).time, 0.01);\n        } else {\n            n > 1 ? curSeg = $bm_sub(pos.key($bm_sub(n, 1)).time, 0.01) : curSeg = $bm_sub(pos.key(pos.numKeys).time, 0.01);\n        }\n        while (tNext < t && nb <= nMax) {\n            vl *= e;\n            segDur *= e;\n            tCur = tNext;\n            tNext = $bm_sum(tNext, segDur);\n            nb++;\n            hitData.push(segDur);\n        }\n        if (nb <= nMax) {\n            delta = $bm_sub(t, tCur);\n            res = $bm_sum(p, $bm_mul($bm_mul(vu, delta), $bm_sub(vl, $bm_div($bm_mul(g, delta), 2))));\n            for (var i = 0; i < hitData.length - 1; i++) {\n                curSeg = $bm_sum(curSeg, hitData[i]);\n            }\n            $bm_rt = $bm_sum(value, res);\n        } else {\n            $bm_rt = $bm_sum(value, p);\n        }\n    } else {\n        $bm_rt = $bm_sum(value, p);\n    }\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"},"a":{"a":0,"k":[35.25,35.25,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"ef":[{"ty":5,"nm":"Bounce Settings","np":59,"mn":"Pseudo/0.08605332387367026","ix":1,"en":1,"ef":[{"ty":7,"nm":"Enable","mn":"Pseudo/0.08605332387367026-0001","ix":1,"v":{"a":0,"k":1,"ix":1}},{"ty":0,"nm":"Max Bounce","mn":"Pseudo/0.08605332387367026-0002","ix":2,"v":{"a":0,"k":2,"ix":2}},{"ty":7,"nm":"Gravity Presets","mn":"Pseudo/0.08605332387367026-0003","ix":3,"v":{"a":0,"k":5,"ix":3}},{"ty":6,"nm":"Custom Preset","mn":"Pseudo/0.08605332387367026-0004","ix":4,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/0.08605332387367026-0005","ix":5,"v":{"a":0,"k":4,"ix":5}},{"ty":0,"nm":"Gravity","mn":"Pseudo/0.08605332387367026-0006","ix":6,"v":{"a":0,"k":3,"ix":6}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0007","ix":7,"v":0},{"ty":6,"nm":"Squash & Stretch","mn":"Pseudo/0.08605332387367026-0008","ix":8,"v":0},{"ty":7,"nm":"On/Off ","mn":"Pseudo/0.08605332387367026-0009","ix":9,"v":{"a":0,"k":1,"ix":9}},{"ty":7,"nm":"Squash Type ","mn":"Pseudo/0.08605332387367026-0010","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Squash Value","mn":"Pseudo/0.08605332387367026-0011","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Stretch Type","mn":"Pseudo/0.08605332387367026-0012","ix":12,"v":{"a":0,"k":1,"ix":12}},{"ty":0,"nm":"Stretch Value","mn":"Pseudo/0.08605332387367026-0013","ix":13,"v":{"a":0,"k":40,"ix":13}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0014","ix":14,"v":0},{"ty":6,"nm":"Auto Rotate","mn":"Pseudo/0.08605332387367026-0015","ix":15,"v":0},{"ty":7,"nm":"On/Off","mn":"Pseudo/0.08605332387367026-0016","ix":16,"v":{"a":0,"k":1,"ix":16}},{"ty":7,"nm":"Reverse","mn":"Pseudo/0.08605332387367026-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":7,"nm":"Keep Rolling","mn":"Pseudo/0.08605332387367026-0018","ix":18,"v":{"a":0,"k":0,"ix":18}},{"ty":0,"nm":"Rotate Power","mn":"Pseudo/0.08605332387367026-0019","ix":19,"v":{"a":0,"k":10,"ix":19}},{"ty":0,"nm":"Offset ","mn":"Pseudo/0.08605332387367026-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0021","ix":21,"v":0},{"ty":6,"nm":"Transform","mn":"Pseudo/0.08605332387367026-0022","ix":22,"v":0},{"ty":0,"nm":"Position X","mn":"Pseudo/0.08605332387367026-0023","ix":23,"v":{"a":0,"k":0,"ix":23}},{"ty":0,"nm":"Position Y","mn":"Pseudo/0.08605332387367026-0024","ix":24,"v":{"a":0,"k":0,"ix":24}},{"ty":0,"nm":"Offset X","mn":"Pseudo/0.08605332387367026-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":0,"nm":"Offset Y","mn":"Pseudo/0.08605332387367026-0026","ix":26,"v":{"a":0,"k":0,"ix":26}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0027","ix":27,"v":0},{"ty":6,"nm":"Help","mn":"Pseudo/0.08605332387367026-0028","ix":28,"v":0},{"ty":6,"nm":"It works best with small","mn":"Pseudo/0.08605332387367026-0029","ix":29,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0030","ix":30,"v":0},{"ty":6,"nm":"keyframe distance like 4 or 7","mn":"Pseudo/0.08605332387367026-0031","ix":31,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0032","ix":32,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0033","ix":33,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0034","ix":34,"v":0},{"ty":6,"nm":"For accurate calculations use","mn":"Pseudo/0.08605332387367026-0035","ix":35,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0036","ix":36,"v":0},{"ty":6,"nm":"linear keyframes for Y position","mn":"Pseudo/0.08605332387367026-0037","ix":37,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0038","ix":38,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0039","ix":39,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0040","ix":40,"v":0},{"ty":6,"nm":"The second squash type ","mn":"Pseudo/0.08605332387367026-0041","ix":41,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0042","ix":42,"v":0},{"ty":6,"nm":"doesn't work with shapes","mn":"Pseudo/0.08605332387367026-0043","ix":43,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0044","ix":44,"v":0},{"ty":6,"nm":"  ","mn":"Pseudo/0.08605332387367026-0045","ix":45,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0046","ix":46,"v":0},{"ty":6,"nm":"For more tools visit:","mn":"Pseudo/0.08605332387367026-0047","ix":47,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0048","ix":48,"v":0},{"ty":6,"nm":"www.motionape.com","mn":"Pseudo/0.08605332387367026-0049","ix":49,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0050","ix":50,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0051","ix":51,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0052","ix":52,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0053","ix":53,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0054","ix":54,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0055","ix":55,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0056","ix":56,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0057","ix":57,"v":0}]},{"ty":5,"nm":"(fx) Auto-Rotate","np":14,"mn":"ADBE Geometry2","ix":2,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,250],"ix":1,"x":"var $bm_rt;\nfunction calCenter(h, g, d, j, i) {\n    if (g > d) {\n        var e = g;\n        g = d;\n        d = e;\n        e = j;\n        j = i;\n        i = e;\n    }\n    var f = $bm_div($bm_sub(h, g), $bm_sub(d, g));\n    return $bm_sum(j, $bm_mul($bm_sub(i, j), f));\n}\nfunction getSize(f, j, l) {\n    var i = f.sourceRectAtTime(l);\n    var h = i.top;\n    var e = i.left;\n    var k = $bm_sum(e, i.width);\n    var d = $bm_sum(h, i.height);\n    var g = [\n            calCenter(j[0], 0, 100, e, k),\n            calCenter(j[1], 0, 100, h, d)\n        ];\n    return f.toComp(g, l);\n}\n$bm_rt = getSize(thisLayer, [\n    50,\n    50\n], time);"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,250],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8,"x":"var $bm_rt;\nvar fx, fps, bounceDur, keepRoll, bounceDur, bounceDur, bounceDur, pos, prevKey, lastKey, lastVal, prevVal, posRef, pos, posRef, posRef, prevKey, lastKey, lastVal, prevVal, o, rev, o, onOff, dia, multi, p1, p2, p, p, p;\ntry {\n    fx = effect('Bounce Settings');\n    fps = thisComp.frameDuration;\n    bounceDur = effect('(fx) Bounce Duration')('Slider');\n    keepRoll = effect('Bounce Settings')('Keep Rolling').value;\n    keepRoll ? bounceDur = thisLayer.outPoint : bounceDur = bounceDur;\n    try {\n        pos = [\n            transform.xPosition,\n            transform.yPosition\n        ];\n        prevKey = transform.yPosition.key($bm_sub(transform.yPosition.numKeys, 1)).time;\n        lastKey = transform.yPosition.key(transform.yPosition.numKeys).time;\n        lastVal = transform.xPosition.valueAtTime(lastKey);\n        prevVal = transform.xPosition.valueAtTime(prevKey);\n        posRef = transform.xPosition.valueAtTime(bounceDur);\n    } catch (e$$4) {\n        pos = transform.position;\n        posRef = pos.valueAtTime(bounceDur);\n        posRef = posRef[0];\n        prevKey = pos.key(pos.numKeys).time;\n        lastKey = pos.key(pos.numKeys).time;\n        lastVal = pos.valueAtTime(prevKey);\n        prevVal = pos.valueAtTime(prevKey);\n    }\n    o = fx('Offset ');\n    rev = fx('Reverse').value;\n    if (rev)\n        o = $bm_neg(o);\n    $bm_rt = onOff = fx('On/Off').value;\n    if (onOff && fx('Enable').value && time < bounceDur) {\n        dia = 360;\n        multi = $bm_mul(effect('Bounce Settings')('Rotate Power'), 36);\n        p1 = $bm_mul($bm_div(pos[0], $bm_mul(Math.PI, dia)), multi);\n        p2 = $bm_mul($bm_div(posRef, $bm_mul(Math.PI, dia)), multi);\n        p = $bm_sub(p1, p2);\n        if (time >= prevKey && time <= lastKey) {\n            if (!keepRoll) {\n                if (prevVal !== lastVal) {\n                    p = $bm_sub(360, $bm_mul(p, linear(time, prevKey, lastKey, 0, 1)));\n                }\n            }\n        }\n        if (time < prevKey && !keepRoll) {\n            p = $bm_sum(value, o);\n        }\n        $bm_rt = !rev ? $bm_sum(p, o) : $bm_sum($bm_neg(p), o);\n    } else {\n        $bm_rt = onOff ? $bm_sum(value, o) : value;\n    }\n    ;\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Stretch-Scale","np":14,"mn":"ADBE Geometry2","ix":3,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,250],"ix":1,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,250],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Bounce Settings')('Stretch Type').value == 1 ? $bm_sum(value, effect('(fx) Stretch-Scale')('ADBE Geometry2-0006')) : value;"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\n$bm_rt = linear(effect('(fx) Stretch-Scale')('ADBE Geometry2-0003'), 100, 200, 100, 50);"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\nvar L, fx, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, pos, p, pos, p, lastKey, prevKey, fps, nMax, n, n, curSeg, curKey, hitData, firstSpeed, curSpeed, vel, velPrev, velNext, t, v, vl, vu, vu, p, tCur, segDur, tNext, nb, squash, result, delta, total, result, curSeg, result, result, result, result, result, result, result;\ntry {\n    L = thisLayer;\n    $bm_rt = fx = L.effect('Bounce Settings');\n    if (fx('Enable').value && fx('On/Off ').value) {\n        squash = $bm_mul(fx('Stretch Value'), 2);\n        switch (fx('Gravity Presets').value) {\n        case 1:\n            e = 0.6;\n            g = 3000;\n            squash = $bm_mul(squash, 2);\n            break;\n        case 2:\n            e = 0.6;\n            g = 4000;\n            squash = $bm_mul(squash, 1.5);\n            break;\n        case 3:\n            e = 0.5;\n            g = 5000;\n            squash = $bm_mul(squash, 1);\n            break;\n        case 4:\n            e = 0.45;\n            g = 7000;\n            squash = $bm_mul(squash, 0.8);\n            break;\n        case 5:\n            e = 0.4;\n            g = 10000;\n            squash = $bm_mul(squash, 0.6);\n            break;\n        default:\n            e = $bm_div(fx('Elasticity'), 10);\n            g = $bm_mul(fx('Gravity'), 1000);\n        }\n        try {\n            pos = transform.yPosition;\n            p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n            pos.key(pos.numKeys).time;\n        } catch (e$$4) {\n            pos = transform.position;\n            p = [\n                $bm_sum(fx('Position X'), fx('Offset X')),\n                $bm_sum(fx('Position Y'), fx('Offset Y'))\n            ];\n        }\n        lastKey = pos.key(pos.numKeys).time;\n        prevKey = pos.key($bm_sub(pos.numKeys, 1)).time;\n        fps = thisComp.frameDuration;\n        nMax = fx('Max Bounce');\n        $bm_rt = n = 0;\n        if (pos.numKeys > 0) {\n            $bm_rt = n = pos.nearestKey(time).index;\n            if (pos.key(n).time > time)\n                n--;\n        }\n        if (n > 0) {\n            curSeg = pos.key(n).time;\n            curKey = pos.key(n).time;\n            hitData = [];\n            firstSpeed = pos.speedAtTime($bm_sub(lastKey, fps));\n            curSpeed = Math.abs(pos.speed);\n            vel = pos.velocity;\n            velPrev = pos.velocityAtTime($bm_sub(time, fps));\n            velNext = pos.velocityAtTime($bm_sum(time, fps));\n            t = $bm_sub(time, pos.key(n).time);\n            v = $bm_mul($bm_neg(pos.velocityAtTime($bm_sub(lastKey, 0.001))), e);\n            function isArray(p) {\n                try {\n                    var dummyVar = p[1];\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            }\n            vl = length(v);\n            if ($bm_isInstanceOfArray(value)) {\n                vu = vl > 0 ? normalize(v) : [\n                    0,\n                    0,\n                    0\n                ];\n            } else {\n                vu = v < 0 ? -1 : 1;\n                p = 0;\n            }\n            tCur = 0;\n            segDur = $bm_div($bm_mul(2, vl), g);\n            tNext = segDur;\n            nb = 1;\n            hitData.push(segDur);\n            squash = $bm_mul($bm_mul(squash, $bm_div(curSpeed, firstSpeed)), nb);\n            result = 0;\n            while (tNext < t && nb <= nMax) {\n                vl *= e;\n                segDur *= e;\n                tCur = tNext;\n                tNext = $bm_sum(tNext, segDur);\n                nb++;\n                hitData.push(segDur);\n            }\n            if (nb <= nMax) {\n                delta = $bm_sub(t, tCur);\n                total = $bm_sum(curKey, 0.01);\n                result = 0;\n                for (var i = 0; i < hitData.length; i++) {\n                    var total = $bm_sum(total, hitData[i]);\n                }\n                for (var i = 0; i < hitData.length - 1; i++) {\n                    curSeg = $bm_sum(curSeg, hitData[i]);\n                }\n                if (time > curSeg && time < curSeg + segDur / 2) {\n                    result = linear(time, curSeg, $bm_sum(curSeg, $bm_div(segDur, 2)), squash, 0);\n                }\n                if (time > curSeg + segDur / 2 && time < total - fps) {\n                    result = linear(time, $bm_sum(curSeg, $bm_div(segDur, 2)), $bm_sub(total, fps), 0, squash);\n                }\n                if (time > total - fps * 3 && time < total - fps) {\n                    result = linear(time, $bm_sub(total, $bm_mul(fps, 3)), $bm_sub(total, fps), result, 0);\n                }\n                if (time > prevKey && time <= lastKey - fps * 2) {\n                    result = linear(time, prevKey, $bm_sub(lastKey, $bm_mul(fps, 2)), 0, squash);\n                }\n                if (time >= lastKey - fps * 2 && time < lastKey) {\n                    result = linear(time, $bm_sub(lastKey, $bm_mul(fps, 2)), lastKey, squash, 0);\n                }\n                result = $bm_div(result, nb);\n                result = clamp(result, 0, 60);\n                $bm_rt = $bm_sum(value, result);\n            } else {\n                $bm_rt = $bm_sum(value, p);\n            }\n        } else {\n            $bm_rt = value;\n        }\n    } else {\n        $bm_rt = value;\n    }\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":100,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Stretch-Echo","np":7,"mn":"ADBE Echo","ix":4,"en":1,"ef":[{"ty":0,"nm":"Echo Time (seconds)","mn":"ADBE Echo-0001","ix":1,"v":{"a":0,"k":0,"ix":1,"x":"var $bm_rt;\nvar n, v, s, fps, s, fps, p, t, p, t, t, p, v;\nn = effect('(fx) Stretch-Echo')('Number Of Echoes');\nv = linear(n, 0, 10, 0.0005, 0.005);\ns = effect('(fx) Stretch-Scale')('Skew Axis');\nfps = thisComp.frameDuration;\nif (s < 0) {\n    s = $bm_neg(s);\n    fps = 0;\n}\ntry {\n    p = transform.yPosition;\n    t = p.valueAtTime($bm_sub(time, fps));\n} catch (err) {\n    p = transform.position;\n    t = p.valueAtTime($bm_sub(time, fps));\n    t = t[1];\n    p = p[1];\n}\nv = linear(s, 0, 60, 0, v);\n$bm_rt = t > p ? v : -v;"}},{"ty":0,"nm":"Number Of Echoes","mn":"ADBE Echo-0002","ix":2,"v":{"a":0,"k":9,"ix":2,"x":"var $bm_rt;\nvar L, fx, v, s, d, v, s, v;\nL = thisLayer;\nfx = L.effect('Bounce Settings');\nv = $bm_div(effect('Bounce Settings')('Stretch Value'), 5);\ns = effect('(fx) Stretch-Scale')('Skew Axis');\n$bm_rt = d = effect('(fx) Squash-Circle')('Skew Axis');\nif (s < 0) {\n    v = v;\n    $bm_rt = s = $bm_neg(s);\n}\nif (fx('Enable').value && fx('On/Off ').value && fx('Stretch Type') == 2) {\n    v = linear(d, 0, 60, v, 0);\n    $bm_rt = linear(s, 0, 30, 0, v);\n} else {\n    $bm_rt = 0;\n}"}},{"ty":0,"nm":"Starting Intensity","mn":"ADBE Echo-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":0,"nm":"Decay","mn":"ADBE Echo-0004","ix":4,"v":{"a":0,"k":1,"ix":4}},{"ty":7,"nm":"Echo Operator","mn":"ADBE Echo-0005","ix":5,"v":{"a":0,"k":2,"ix":5}}]},{"ty":5,"nm":"(fx) Squash-Circle","np":14,"mn":"ADBE Geometry2","ix":5,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,250],"ix":1,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,250],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Bounce Settings')('Squash Type ') == 1 ? $bm_sum(value, effect('(fx) Squash-Circle')('ADBE Geometry2-0006')) : value;"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\nvar L, fx, squashPower, squash, e, g, e, g, e, g, e, g, e, g, squash, e, g, pos, p, pos, p, lastKey, prevKey, fps, nMax, n, n, curSeg, curSeg, curSeg, hitData, curKey, curKey, curKey, curKey, curKey, curKey, firstSpeed, curSpeed, vel, velPrev, velNext, t, v, vl, vu, vu, p, tCur, segDur, tNext, nb, squash, result, ignore, delta, total, curSeg, y1, y2, y3, y3, ignore, ignore, ignore, result, nbg, result, squash, squash, squash, result, result, result, result, result, result, curKey, curKey, curKey, result, result, result;\ntry {\n    L = thisLayer;\n    $bm_rt = fx = L.effect('Bounce Settings');\n    if (fx('Enable').value && fx('On/Off ').value) {\n        squashPower = $bm_div(effect('Bounce Settings')('Squash Value'), 100);\n        squash = 200;\n        switch (fx('Gravity Presets').value) {\n        case 1:\n            e = 0.6;\n            g = 3000;\n            break;\n        case 2:\n            e = 0.6;\n            g = 4000;\n            break;\n        case 3:\n            e = 0.5;\n            g = 5000;\n            break;\n        case 4:\n            e = 0.45;\n            g = 7000;\n            break;\n        case 5:\n            e = 0.4;\n            g = 10000;\n            squash = squash;\n            break;\n        default:\n            e = $bm_div(fx('Elasticity'), 10);\n            g = $bm_mul(fx('Gravity'), 1000);\n        }\n        try {\n            pos = transform.yPosition;\n            p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n            pos.key(pos.numKeys).time;\n        } catch (e$$4) {\n            pos = transform.position;\n            p = [\n                $bm_sum(fx('Position X'), fx('Offset X')),\n                $bm_sum(fx('Position Y'), fx('Offset Y'))\n            ];\n        }\n        lastKey = pos.key(pos.numKeys).time;\n        prevKey = pos.key($bm_sub(pos.numKeys, 1)).time;\n        fps = thisComp.frameDuration;\n        nMax = fx('Max Bounce');\n        $bm_rt = n = 0;\n        if (pos.numKeys > 0) {\n            $bm_rt = n = pos.nearestKey(time).index;\n            if (pos.key(n).time > time)\n                n--;\n        }\n        if (n > 0 && n % 2 == 0) {\n            n > 1 ? curSeg = pos.key(n).time : curSeg = 0;\n            hitData = [];\n            if ($bm_mod(n, 2) == 0) {\n                n > 1 ? curKey = pos.key(n).time : curKey = pos.key(pos.numKeys).time;\n            } else {\n                n > 1 ? curKey = pos.key($bm_sub(n, 1)).time : curKey = pos.key(pos.numKeys).time;\n            }\n            firstSpeed = pos.speedAtTime($bm_sub(curKey, fps));\n            curSpeed = pos.speed;\n            vel = pos.velocity;\n            velPrev = pos.velocityAtTime($bm_sub(time, fps));\n            velNext = pos.velocityAtTime($bm_sum(time, fps));\n            t = $bm_sub(time, pos.key(n).time);\n            v = $bm_mul($bm_neg(pos.velocityAtTime($bm_sub(pos.key(n).time, 0.001))), e);\n            function isArray(p) {\n                try {\n                    var dummyVar = p[1];\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            }\n            vl = length(v);\n            if ($bm_isInstanceOfArray(value)) {\n                vu = vl > 0 ? normalize(v) : [\n                    0,\n                    0,\n                    0\n                ];\n            } else {\n                vu = v < 0 ? -1 : 1;\n                p = 0;\n            }\n            tCur = 0;\n            segDur = $bm_div($bm_mul(2, vl), g);\n            tNext = segDur;\n            nb = 1;\n            hitData.push(segDur);\n            squash = $bm_mul($bm_mul(squash, $bm_div(curSpeed, firstSpeed)), nb);\n            result = 0;\n            ignore = 1;\n            while (tNext < t && nb <= nMax) {\n                vl *= e;\n                segDur *= e;\n                tCur = tNext;\n                tNext = $bm_sum(tNext, segDur);\n                nb++;\n                hitData.push(segDur);\n            }\n            if (nb <= nMax) {\n                delta = $bm_sub(t, tCur);\n                for (var i = 0; i < hitData.length; i++) {\n                    total = $bm_sum(curKey, hitData[i]);\n                }\n                for (var i = 0; i < hitData.length - 1; i++) {\n                    curSeg = $bm_sum(curSeg, hitData[i]);\n                }\n                if (n > 1) {\n                    y1 = pos.key(n);\n                    y2 = pos.key($bm_sub(n, 1));\n                    try {\n                        y3 = pos.key($bm_sum(n, 1));\n                    } catch (err) {\n                        y3 = y2;\n                    }\n                    ;\n                    y1 < y2 ? ignore = 0 : ignore = 1;\n                }\n                result = 0;\n                nbg = $bm_div(10000, g);\n                if (time >= curSeg && time < curSeg + fps * 4) {\n                    result = Math.abs(linear(time, curSeg, $bm_sum(curSeg, $bm_mul(fps, 4)), $bm_mul(squash, 0.5), 0));\n                }\n                if (time >= curSeg && time < curSeg + fps / 2) {\n                    squash = $bm_mul($bm_mul(squash, $bm_div(pos.speedAtTime($bm_sub(time, fps)), firstSpeed)), nb);\n                }\n                if (time >= total - fps && time <= total) {\n                    squash = fx('Squash Value');\n                    squash = $bm_mul($bm_mul(squash, $bm_div(pos.speedAtTime($bm_sub(time, fps)), firstSpeed)), nb);\n                    result = squash;\n                }\n                if (time >= total - fps * 2 && time <= total) {\n                    result = linear(time, $bm_sub(total, $bm_mul(fps, 2)), total, 0, squash);\n                }\n                if (nb >= nbg) {\n                    result = $bm_div(result, $bm_div(nb, nbg));\n                }\n                if (nb > 3) {\n                    result = 0;\n                }\n                result = clamp(result, 0, 60);\n                $bm_rt = result = $bm_mul(result, squashPower);\n            } else {\n                n > 1 ? curKey = pos.key(n).time : curKey = pos.key(pos.numKeys).time;\n                if (time >= $bm_sub(curKey, fps)) {\n                    result = $bm_mul(squash, 0.2);\n                    result = $bm_mul(result, squashPower);\n                }\n                result = clamp(result, 0, 60);\n                $bm_rt = $bm_sum($bm_sum(value, p), result);\n            }\n        } else {\n            $bm_rt = value;\n        }\n    } else {\n        $bm_rt = value;\n    }\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":100,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Squash-Down","np":14,"mn":"ADBE Geometry2","ix":6,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,500],"ix":1,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,500],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\nvar squash;\nsquash = $bm_sub(effect('(fx) Squash-Circle')('Scale Width'), 100);\n$bm_rt = $bm_sub(value, $bm_div(squash, 2));"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Bounce Duration","np":3,"mn":"ADBE Slider Control","ix":7,"en":1,"ef":[{"ty":0,"nm":"Slider","mn":"ADBE Slider Control-0001","ix":1,"v":{"a":0,"k":144,"ix":1,"x":"var $bm_rt;\nvar L, fx, fps, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, p, pos, lastKey, p, pos, lastKey, nMax, n, n, hitData, firstSpeed, curSpeed, t, v, vl, vu, vu, p, tCur, segDur, tNext, nb, squash, result, i, vl, segDur, tCur, tNext;\ntry {\n    L = thisLayer;\n    fx = L.effect('Bounce Settings');\n    fps = thisComp.frameDuration;\n    squash = fx('Squash Value');\n    switch (fx('Gravity Presets').value) {\n    case 1:\n        e = 0.6;\n        g = 3000;\n        squash = $bm_mul(squash, 1.4);\n        break;\n    case 2:\n        e = 0.6;\n        g = 4000;\n        squash = $bm_mul(squash, 1.2);\n        break;\n    case 3:\n        e = 0.5;\n        g = 5000;\n        squash = $bm_mul(squash, 1);\n        break;\n    case 4:\n        e = 0.45;\n        g = 7000;\n        squash = $bm_mul(squash, 0.7);\n        break;\n    case 5:\n        e = 0.4;\n        g = 10000;\n        squash = $bm_mul(squash, 0.4);\n        break;\n    default:\n        e = $bm_div(fx('Elasticity'), 10);\n        g = $bm_mul(fx('Gravity'), 1000);\n    }\n    try {\n        p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n        pos = L.transform.yPosition;\n        lastKey = transform.yPosition.key(transform.yPosition.numKeys).time;\n    } catch (e$$4) {\n        p = [\n            $bm_sum(fx('Position X'), fx('Offset X')),\n            $bm_sum(fx('Position Y'), fx('Offset Y'))\n        ];\n        pos = L.transform.position;\n        lastKey = pos.key(pos.numKeys).time;\n    }\n    nMax = fx('Max Bounce');\n    $bm_rt = n = 0;\n    if (pos.numKeys > 0) {\n        $bm_rt = n = pos.nearestKey(time).index;\n        if (pos.key(n).time > time)\n            n--;\n    }\n    if (n > 0 && fx('Enable') == 1) {\n        hitData = [];\n        firstSpeed = pos.speedAtTime(lastKey);\n        curSpeed = pos.speed;\n        t = $bm_sub(time, pos.key(n).time);\n        v = $bm_mul($bm_neg(pos.velocityAtTime($bm_sub(lastKey, 0.001))), e);\n        vl = length(v);\n        if ($bm_isInstanceOfArray(value)) {\n            vu = vl > 0 ? normalize(v) : [\n                0,\n                0,\n                0\n            ];\n        } else {\n            vu = v < 0 ? -1 : 1;\n            p = 0;\n        }\n        tCur = 0;\n        segDur = $bm_div($bm_mul(2, vl), g);\n        tNext = segDur;\n        nb = 1;\n        hitData.push(segDur);\n        squash = $bm_mul($bm_mul(squash, $bm_div(curSpeed, firstSpeed)), nb);\n        result = 0;\n        for (i = 1; i < nMax; i++) {\n            vl *= e;\n            segDur *= e;\n            tCur = tNext;\n            tNext = $bm_sum(tNext, segDur);\n            nb++;\n            hitData.push(segDur);\n        }\n        $bm_rt = $bm_sum(lastKey, tNext);\n    } else\n        $bm_rt = 0;\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-19.33],[19.33,0],[0,19.33],[-19.33,0]],"o":[[0,19.33],[-19.33,0],[0,-19.33],[19.33,0]],"v":[[35,0],[0,35],[-35,0],[0,-35]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0.317647058824,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[35.25,35.25],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":600,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"Bol 2 Outlines","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0,"y":1},"o":{"x":0.167,"y":0},"t":5,"s":[250,256.479,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.433},"o":{"x":0.616,"y":0},"t":25,"s":[250,116.479,0],"to":[0,0,0],"ti":[0,0,0]},{"t":45,"s":[250,256.479,0]}],"ix":2,"x":"var $bm_rt;\nvar fx, e, g, e, g, e, g, e, g, e, g, e, g, pos, p, pos, p, fps, nMax, n, n, hitData, t, v, vl, vu, vu, tCur, segDur, tNext, nb, curSeg, curSeg, curSeg, curSeg, curSeg, curSeg, delta, res, curSeg;\ntry {\n    fx = effect('Bounce Settings');\n    switch (fx('Gravity Presets').value) {\n    case 1:\n        e = 0.6;\n        g = 3000;\n        break;\n    case 2:\n        e = 0.6;\n        g = 4000;\n        break;\n    case 3:\n        e = 0.5;\n        g = 5000;\n        break;\n    case 4:\n        e = 0.45;\n        g = 7000;\n        break;\n    case 5:\n        e = 0.4;\n        g = 10000;\n        break;\n    default:\n        e = $bm_div(fx('Elasticity'), 10);\n        g = $bm_mul(fx('Gravity'), 1000);\n    }\n    try {\n        pos = transform.yPosition;\n        p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n        pos.key(pos.numKeys).time;\n    } catch (e$$4) {\n        pos = transform.position;\n        p = [\n            $bm_sum(fx('Position X'), fx('Offset X')),\n            $bm_sum(fx('Position Y'), fx('Offset Y'))\n        ];\n    }\n    fps = thisComp.frameDuration;\n    nMax = fx('Max Bounce');\n    $bm_rt = n = 0;\n    if (numKeys > 0) {\n        $bm_rt = n = nearestKey(time).index;\n        if (key(n).time > time)\n            n--;\n    }\n    if (n > 0 && fx('Enable') == 1) {\n        hitData = [];\n        t = $bm_sub(time, key(n).time);\n        v = $bm_mul($bm_neg(velocityAtTime($bm_sub(key(n).time, 0.001))), e);\n        vl = length(v);\n        if ($bm_isInstanceOfArray(value)) {\n            vu = vl > 0 ? normalize(v) : [\n                0,\n                0,\n                0\n            ];\n        } else {\n            vu = v < 0 ? -1 : 1;\n        }\n        tCur = 0;\n        segDur = $bm_div($bm_mul(2, vl), g);\n        tNext = segDur;\n        nb = 1;\n        hitData.push(segDur);\n        if ($bm_mod(n, 2) == 0) {\n            n > 1 ? curSeg = $bm_sub(pos.key(n).time, 0.01) : curSeg = $bm_sub(pos.key(pos.numKeys).time, 0.01);\n        } else {\n            n > 1 ? curSeg = $bm_sub(pos.key($bm_sub(n, 1)).time, 0.01) : curSeg = $bm_sub(pos.key(pos.numKeys).time, 0.01);\n        }\n        while (tNext < t && nb <= nMax) {\n            vl *= e;\n            segDur *= e;\n            tCur = tNext;\n            tNext = $bm_sum(tNext, segDur);\n            nb++;\n            hitData.push(segDur);\n        }\n        if (nb <= nMax) {\n            delta = $bm_sub(t, tCur);\n            res = $bm_sum(p, $bm_mul($bm_mul(vu, delta), $bm_sub(vl, $bm_div($bm_mul(g, delta), 2))));\n            for (var i = 0; i < hitData.length - 1; i++) {\n                curSeg = $bm_sum(curSeg, hitData[i]);\n            }\n            $bm_rt = $bm_sum(value, res);\n        } else {\n            $bm_rt = $bm_sum(value, p);\n        }\n    } else {\n        $bm_rt = $bm_sum(value, p);\n    }\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"},"a":{"a":0,"k":[35.25,35.25,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"ef":[{"ty":5,"nm":"Bounce Settings","np":59,"mn":"Pseudo/0.08605332387367026","ix":1,"en":1,"ef":[{"ty":7,"nm":"Enable","mn":"Pseudo/0.08605332387367026-0001","ix":1,"v":{"a":0,"k":1,"ix":1}},{"ty":0,"nm":"Max Bounce","mn":"Pseudo/0.08605332387367026-0002","ix":2,"v":{"a":0,"k":2,"ix":2}},{"ty":7,"nm":"Gravity Presets","mn":"Pseudo/0.08605332387367026-0003","ix":3,"v":{"a":0,"k":5,"ix":3}},{"ty":6,"nm":"Custom Preset","mn":"Pseudo/0.08605332387367026-0004","ix":4,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/0.08605332387367026-0005","ix":5,"v":{"a":0,"k":4,"ix":5}},{"ty":0,"nm":"Gravity","mn":"Pseudo/0.08605332387367026-0006","ix":6,"v":{"a":0,"k":3,"ix":6}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0007","ix":7,"v":0},{"ty":6,"nm":"Squash & Stretch","mn":"Pseudo/0.08605332387367026-0008","ix":8,"v":0},{"ty":7,"nm":"On/Off ","mn":"Pseudo/0.08605332387367026-0009","ix":9,"v":{"a":0,"k":1,"ix":9}},{"ty":7,"nm":"Squash Type ","mn":"Pseudo/0.08605332387367026-0010","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Squash Value","mn":"Pseudo/0.08605332387367026-0011","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Stretch Type","mn":"Pseudo/0.08605332387367026-0012","ix":12,"v":{"a":0,"k":1,"ix":12}},{"ty":0,"nm":"Stretch Value","mn":"Pseudo/0.08605332387367026-0013","ix":13,"v":{"a":0,"k":40,"ix":13}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0014","ix":14,"v":0},{"ty":6,"nm":"Auto Rotate","mn":"Pseudo/0.08605332387367026-0015","ix":15,"v":0},{"ty":7,"nm":"On/Off","mn":"Pseudo/0.08605332387367026-0016","ix":16,"v":{"a":0,"k":1,"ix":16}},{"ty":7,"nm":"Reverse","mn":"Pseudo/0.08605332387367026-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":7,"nm":"Keep Rolling","mn":"Pseudo/0.08605332387367026-0018","ix":18,"v":{"a":0,"k":0,"ix":18}},{"ty":0,"nm":"Rotate Power","mn":"Pseudo/0.08605332387367026-0019","ix":19,"v":{"a":0,"k":10,"ix":19}},{"ty":0,"nm":"Offset ","mn":"Pseudo/0.08605332387367026-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0021","ix":21,"v":0},{"ty":6,"nm":"Transform","mn":"Pseudo/0.08605332387367026-0022","ix":22,"v":0},{"ty":0,"nm":"Position X","mn":"Pseudo/0.08605332387367026-0023","ix":23,"v":{"a":0,"k":0,"ix":23}},{"ty":0,"nm":"Position Y","mn":"Pseudo/0.08605332387367026-0024","ix":24,"v":{"a":0,"k":0,"ix":24}},{"ty":0,"nm":"Offset X","mn":"Pseudo/0.08605332387367026-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":0,"nm":"Offset Y","mn":"Pseudo/0.08605332387367026-0026","ix":26,"v":{"a":0,"k":0,"ix":26}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0027","ix":27,"v":0},{"ty":6,"nm":"Help","mn":"Pseudo/0.08605332387367026-0028","ix":28,"v":0},{"ty":6,"nm":"It works best with small","mn":"Pseudo/0.08605332387367026-0029","ix":29,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0030","ix":30,"v":0},{"ty":6,"nm":"keyframe distance like 4 or 7","mn":"Pseudo/0.08605332387367026-0031","ix":31,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0032","ix":32,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0033","ix":33,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0034","ix":34,"v":0},{"ty":6,"nm":"For accurate calculations use","mn":"Pseudo/0.08605332387367026-0035","ix":35,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0036","ix":36,"v":0},{"ty":6,"nm":"linear keyframes for Y position","mn":"Pseudo/0.08605332387367026-0037","ix":37,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0038","ix":38,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0039","ix":39,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0040","ix":40,"v":0},{"ty":6,"nm":"The second squash type ","mn":"Pseudo/0.08605332387367026-0041","ix":41,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0042","ix":42,"v":0},{"ty":6,"nm":"doesn't work with shapes","mn":"Pseudo/0.08605332387367026-0043","ix":43,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0044","ix":44,"v":0},{"ty":6,"nm":"  ","mn":"Pseudo/0.08605332387367026-0045","ix":45,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0046","ix":46,"v":0},{"ty":6,"nm":"For more tools visit:","mn":"Pseudo/0.08605332387367026-0047","ix":47,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0048","ix":48,"v":0},{"ty":6,"nm":"www.motionape.com","mn":"Pseudo/0.08605332387367026-0049","ix":49,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0050","ix":50,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0051","ix":51,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0052","ix":52,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0053","ix":53,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0054","ix":54,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0055","ix":55,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0056","ix":56,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0057","ix":57,"v":0}]},{"ty":5,"nm":"(fx) Auto-Rotate","np":14,"mn":"ADBE Geometry2","ix":2,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,250],"ix":1,"x":"var $bm_rt;\nfunction calCenter(h, g, d, j, i) {\n    if (g > d) {\n        var e = g;\n        g = d;\n        d = e;\n        e = j;\n        j = i;\n        i = e;\n    }\n    var f = $bm_div($bm_sub(h, g), $bm_sub(d, g));\n    return $bm_sum(j, $bm_mul($bm_sub(i, j), f));\n}\nfunction getSize(f, j, l) {\n    var i = f.sourceRectAtTime(l);\n    var h = i.top;\n    var e = i.left;\n    var k = $bm_sum(e, i.width);\n    var d = $bm_sum(h, i.height);\n    var g = [\n            calCenter(j[0], 0, 100, e, k),\n            calCenter(j[1], 0, 100, h, d)\n        ];\n    return f.toComp(g, l);\n}\n$bm_rt = getSize(thisLayer, [\n    50,\n    50\n], time);"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,250],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8,"x":"var $bm_rt;\nvar fx, fps, bounceDur, keepRoll, bounceDur, bounceDur, bounceDur, pos, prevKey, lastKey, lastVal, prevVal, posRef, pos, posRef, posRef, prevKey, lastKey, lastVal, prevVal, o, rev, o, onOff, dia, multi, p1, p2, p, p, p;\ntry {\n    fx = effect('Bounce Settings');\n    fps = thisComp.frameDuration;\n    bounceDur = effect('(fx) Bounce Duration')('Slider');\n    keepRoll = effect('Bounce Settings')('Keep Rolling').value;\n    keepRoll ? bounceDur = thisLayer.outPoint : bounceDur = bounceDur;\n    try {\n        pos = [\n            transform.xPosition,\n            transform.yPosition\n        ];\n        prevKey = transform.yPosition.key($bm_sub(transform.yPosition.numKeys, 1)).time;\n        lastKey = transform.yPosition.key(transform.yPosition.numKeys).time;\n        lastVal = transform.xPosition.valueAtTime(lastKey);\n        prevVal = transform.xPosition.valueAtTime(prevKey);\n        posRef = transform.xPosition.valueAtTime(bounceDur);\n    } catch (e$$4) {\n        pos = transform.position;\n        posRef = pos.valueAtTime(bounceDur);\n        posRef = posRef[0];\n        prevKey = pos.key(pos.numKeys).time;\n        lastKey = pos.key(pos.numKeys).time;\n        lastVal = pos.valueAtTime(prevKey);\n        prevVal = pos.valueAtTime(prevKey);\n    }\n    o = fx('Offset ');\n    rev = fx('Reverse').value;\n    if (rev)\n        o = $bm_neg(o);\n    $bm_rt = onOff = fx('On/Off').value;\n    if (onOff && fx('Enable').value && time < bounceDur) {\n        dia = 360;\n        multi = $bm_mul(effect('Bounce Settings')('Rotate Power'), 36);\n        p1 = $bm_mul($bm_div(pos[0], $bm_mul(Math.PI, dia)), multi);\n        p2 = $bm_mul($bm_div(posRef, $bm_mul(Math.PI, dia)), multi);\n        p = $bm_sub(p1, p2);\n        if (time >= prevKey && time <= lastKey) {\n            if (!keepRoll) {\n                if (prevVal !== lastVal) {\n                    p = $bm_sub(360, $bm_mul(p, linear(time, prevKey, lastKey, 0, 1)));\n                }\n            }\n        }\n        if (time < prevKey && !keepRoll) {\n            p = $bm_sum(value, o);\n        }\n        $bm_rt = !rev ? $bm_sum(p, o) : $bm_sum($bm_neg(p), o);\n    } else {\n        $bm_rt = onOff ? $bm_sum(value, o) : value;\n    }\n    ;\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Stretch-Scale","np":14,"mn":"ADBE Geometry2","ix":3,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,250],"ix":1,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,250],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Bounce Settings')('Stretch Type').value == 1 ? $bm_sum(value, effect('(fx) Stretch-Scale')('ADBE Geometry2-0006')) : value;"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\n$bm_rt = linear(effect('(fx) Stretch-Scale')('ADBE Geometry2-0003'), 100, 200, 100, 50);"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\nvar L, fx, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, pos, p, pos, p, lastKey, prevKey, fps, nMax, n, n, curSeg, curKey, hitData, firstSpeed, curSpeed, vel, velPrev, velNext, t, v, vl, vu, vu, p, tCur, segDur, tNext, nb, squash, result, delta, total, result, curSeg, result, result, result, result, result, result, result;\ntry {\n    L = thisLayer;\n    $bm_rt = fx = L.effect('Bounce Settings');\n    if (fx('Enable').value && fx('On/Off ').value) {\n        squash = $bm_mul(fx('Stretch Value'), 2);\n        switch (fx('Gravity Presets').value) {\n        case 1:\n            e = 0.6;\n            g = 3000;\n            squash = $bm_mul(squash, 2);\n            break;\n        case 2:\n            e = 0.6;\n            g = 4000;\n            squash = $bm_mul(squash, 1.5);\n            break;\n        case 3:\n            e = 0.5;\n            g = 5000;\n            squash = $bm_mul(squash, 1);\n            break;\n        case 4:\n            e = 0.45;\n            g = 7000;\n            squash = $bm_mul(squash, 0.8);\n            break;\n        case 5:\n            e = 0.4;\n            g = 10000;\n            squash = $bm_mul(squash, 0.6);\n            break;\n        default:\n            e = $bm_div(fx('Elasticity'), 10);\n            g = $bm_mul(fx('Gravity'), 1000);\n        }\n        try {\n            pos = transform.yPosition;\n            p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n            pos.key(pos.numKeys).time;\n        } catch (e$$4) {\n            pos = transform.position;\n            p = [\n                $bm_sum(fx('Position X'), fx('Offset X')),\n                $bm_sum(fx('Position Y'), fx('Offset Y'))\n            ];\n        }\n        lastKey = pos.key(pos.numKeys).time;\n        prevKey = pos.key($bm_sub(pos.numKeys, 1)).time;\n        fps = thisComp.frameDuration;\n        nMax = fx('Max Bounce');\n        $bm_rt = n = 0;\n        if (pos.numKeys > 0) {\n            $bm_rt = n = pos.nearestKey(time).index;\n            if (pos.key(n).time > time)\n                n--;\n        }\n        if (n > 0) {\n            curSeg = pos.key(n).time;\n            curKey = pos.key(n).time;\n            hitData = [];\n            firstSpeed = pos.speedAtTime($bm_sub(lastKey, fps));\n            curSpeed = Math.abs(pos.speed);\n            vel = pos.velocity;\n            velPrev = pos.velocityAtTime($bm_sub(time, fps));\n            velNext = pos.velocityAtTime($bm_sum(time, fps));\n            t = $bm_sub(time, pos.key(n).time);\n            v = $bm_mul($bm_neg(pos.velocityAtTime($bm_sub(lastKey, 0.001))), e);\n            function isArray(p) {\n                try {\n                    var dummyVar = p[1];\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            }\n            vl = length(v);\n            if ($bm_isInstanceOfArray(value)) {\n                vu = vl > 0 ? normalize(v) : [\n                    0,\n                    0,\n                    0\n                ];\n            } else {\n                vu = v < 0 ? -1 : 1;\n                p = 0;\n            }\n            tCur = 0;\n            segDur = $bm_div($bm_mul(2, vl), g);\n            tNext = segDur;\n            nb = 1;\n            hitData.push(segDur);\n            squash = $bm_mul($bm_mul(squash, $bm_div(curSpeed, firstSpeed)), nb);\n            result = 0;\n            while (tNext < t && nb <= nMax) {\n                vl *= e;\n                segDur *= e;\n                tCur = tNext;\n                tNext = $bm_sum(tNext, segDur);\n                nb++;\n                hitData.push(segDur);\n            }\n            if (nb <= nMax) {\n                delta = $bm_sub(t, tCur);\n                total = $bm_sum(curKey, 0.01);\n                result = 0;\n                for (var i = 0; i < hitData.length; i++) {\n                    var total = $bm_sum(total, hitData[i]);\n                }\n                for (var i = 0; i < hitData.length - 1; i++) {\n                    curSeg = $bm_sum(curSeg, hitData[i]);\n                }\n                if (time > curSeg && time < curSeg + segDur / 2) {\n                    result = linear(time, curSeg, $bm_sum(curSeg, $bm_div(segDur, 2)), squash, 0);\n                }\n                if (time > curSeg + segDur / 2 && time < total - fps) {\n                    result = linear(time, $bm_sum(curSeg, $bm_div(segDur, 2)), $bm_sub(total, fps), 0, squash);\n                }\n                if (time > total - fps * 3 && time < total - fps) {\n                    result = linear(time, $bm_sub(total, $bm_mul(fps, 3)), $bm_sub(total, fps), result, 0);\n                }\n                if (time > prevKey && time <= lastKey - fps * 2) {\n                    result = linear(time, prevKey, $bm_sub(lastKey, $bm_mul(fps, 2)), 0, squash);\n                }\n                if (time >= lastKey - fps * 2 && time < lastKey) {\n                    result = linear(time, $bm_sub(lastKey, $bm_mul(fps, 2)), lastKey, squash, 0);\n                }\n                result = $bm_div(result, nb);\n                result = clamp(result, 0, 60);\n                $bm_rt = $bm_sum(value, result);\n            } else {\n                $bm_rt = $bm_sum(value, p);\n            }\n        } else {\n            $bm_rt = value;\n        }\n    } else {\n        $bm_rt = value;\n    }\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":100,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Stretch-Echo","np":7,"mn":"ADBE Echo","ix":4,"en":1,"ef":[{"ty":0,"nm":"Echo Time (seconds)","mn":"ADBE Echo-0001","ix":1,"v":{"a":0,"k":0,"ix":1,"x":"var $bm_rt;\nvar n, v, s, fps, s, fps, p, t, p, t, t, p, v;\nn = effect('(fx) Stretch-Echo')('Number Of Echoes');\nv = linear(n, 0, 10, 0.0005, 0.005);\ns = effect('(fx) Stretch-Scale')('Skew Axis');\nfps = thisComp.frameDuration;\nif (s < 0) {\n    s = $bm_neg(s);\n    fps = 0;\n}\ntry {\n    p = transform.yPosition;\n    t = p.valueAtTime($bm_sub(time, fps));\n} catch (err) {\n    p = transform.position;\n    t = p.valueAtTime($bm_sub(time, fps));\n    t = t[1];\n    p = p[1];\n}\nv = linear(s, 0, 60, 0, v);\n$bm_rt = t > p ? v : -v;"}},{"ty":0,"nm":"Number Of Echoes","mn":"ADBE Echo-0002","ix":2,"v":{"a":0,"k":9,"ix":2,"x":"var $bm_rt;\nvar L, fx, v, s, d, v, s, v;\nL = thisLayer;\nfx = L.effect('Bounce Settings');\nv = $bm_div(effect('Bounce Settings')('Stretch Value'), 5);\ns = effect('(fx) Stretch-Scale')('Skew Axis');\n$bm_rt = d = effect('(fx) Squash-Circle')('Skew Axis');\nif (s < 0) {\n    v = v;\n    $bm_rt = s = $bm_neg(s);\n}\nif (fx('Enable').value && fx('On/Off ').value && fx('Stretch Type') == 2) {\n    v = linear(d, 0, 60, v, 0);\n    $bm_rt = linear(s, 0, 30, 0, v);\n} else {\n    $bm_rt = 0;\n}"}},{"ty":0,"nm":"Starting Intensity","mn":"ADBE Echo-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":0,"nm":"Decay","mn":"ADBE Echo-0004","ix":4,"v":{"a":0,"k":1,"ix":4}},{"ty":7,"nm":"Echo Operator","mn":"ADBE Echo-0005","ix":5,"v":{"a":0,"k":2,"ix":5}}]},{"ty":5,"nm":"(fx) Squash-Circle","np":14,"mn":"ADBE Geometry2","ix":5,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,250],"ix":1,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,250],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Bounce Settings')('Squash Type ') == 1 ? $bm_sum(value, effect('(fx) Squash-Circle')('ADBE Geometry2-0006')) : value;"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\nvar L, fx, squashPower, squash, e, g, e, g, e, g, e, g, e, g, squash, e, g, pos, p, pos, p, lastKey, prevKey, fps, nMax, n, n, curSeg, curSeg, curSeg, hitData, curKey, curKey, curKey, curKey, curKey, curKey, firstSpeed, curSpeed, vel, velPrev, velNext, t, v, vl, vu, vu, p, tCur, segDur, tNext, nb, squash, result, ignore, delta, total, curSeg, y1, y2, y3, y3, ignore, ignore, ignore, result, nbg, result, squash, squash, squash, result, result, result, result, result, result, curKey, curKey, curKey, result, result, result;\ntry {\n    L = thisLayer;\n    $bm_rt = fx = L.effect('Bounce Settings');\n    if (fx('Enable').value && fx('On/Off ').value) {\n        squashPower = $bm_div(effect('Bounce Settings')('Squash Value'), 100);\n        squash = 200;\n        switch (fx('Gravity Presets').value) {\n        case 1:\n            e = 0.6;\n            g = 3000;\n            break;\n        case 2:\n            e = 0.6;\n            g = 4000;\n            break;\n        case 3:\n            e = 0.5;\n            g = 5000;\n            break;\n        case 4:\n            e = 0.45;\n            g = 7000;\n            break;\n        case 5:\n            e = 0.4;\n            g = 10000;\n            squash = squash;\n            break;\n        default:\n            e = $bm_div(fx('Elasticity'), 10);\n            g = $bm_mul(fx('Gravity'), 1000);\n        }\n        try {\n            pos = transform.yPosition;\n            p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n            pos.key(pos.numKeys).time;\n        } catch (e$$4) {\n            pos = transform.position;\n            p = [\n                $bm_sum(fx('Position X'), fx('Offset X')),\n                $bm_sum(fx('Position Y'), fx('Offset Y'))\n            ];\n        }\n        lastKey = pos.key(pos.numKeys).time;\n        prevKey = pos.key($bm_sub(pos.numKeys, 1)).time;\n        fps = thisComp.frameDuration;\n        nMax = fx('Max Bounce');\n        $bm_rt = n = 0;\n        if (pos.numKeys > 0) {\n            $bm_rt = n = pos.nearestKey(time).index;\n            if (pos.key(n).time > time)\n                n--;\n        }\n        if (n > 0 && n % 2 == 0) {\n            n > 1 ? curSeg = pos.key(n).time : curSeg = 0;\n            hitData = [];\n            if ($bm_mod(n, 2) == 0) {\n                n > 1 ? curKey = pos.key(n).time : curKey = pos.key(pos.numKeys).time;\n            } else {\n                n > 1 ? curKey = pos.key($bm_sub(n, 1)).time : curKey = pos.key(pos.numKeys).time;\n            }\n            firstSpeed = pos.speedAtTime($bm_sub(curKey, fps));\n            curSpeed = pos.speed;\n            vel = pos.velocity;\n            velPrev = pos.velocityAtTime($bm_sub(time, fps));\n            velNext = pos.velocityAtTime($bm_sum(time, fps));\n            t = $bm_sub(time, pos.key(n).time);\n            v = $bm_mul($bm_neg(pos.velocityAtTime($bm_sub(pos.key(n).time, 0.001))), e);\n            function isArray(p) {\n                try {\n                    var dummyVar = p[1];\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            }\n            vl = length(v);\n            if ($bm_isInstanceOfArray(value)) {\n                vu = vl > 0 ? normalize(v) : [\n                    0,\n                    0,\n                    0\n                ];\n            } else {\n                vu = v < 0 ? -1 : 1;\n                p = 0;\n            }\n            tCur = 0;\n            segDur = $bm_div($bm_mul(2, vl), g);\n            tNext = segDur;\n            nb = 1;\n            hitData.push(segDur);\n            squash = $bm_mul($bm_mul(squash, $bm_div(curSpeed, firstSpeed)), nb);\n            result = 0;\n            ignore = 1;\n            while (tNext < t && nb <= nMax) {\n                vl *= e;\n                segDur *= e;\n                tCur = tNext;\n                tNext = $bm_sum(tNext, segDur);\n                nb++;\n                hitData.push(segDur);\n            }\n            if (nb <= nMax) {\n                delta = $bm_sub(t, tCur);\n                for (var i = 0; i < hitData.length; i++) {\n                    total = $bm_sum(curKey, hitData[i]);\n                }\n                for (var i = 0; i < hitData.length - 1; i++) {\n                    curSeg = $bm_sum(curSeg, hitData[i]);\n                }\n                if (n > 1) {\n                    y1 = pos.key(n);\n                    y2 = pos.key($bm_sub(n, 1));\n                    try {\n                        y3 = pos.key($bm_sum(n, 1));\n                    } catch (err) {\n                        y3 = y2;\n                    }\n                    ;\n                    y1 < y2 ? ignore = 0 : ignore = 1;\n                }\n                result = 0;\n                nbg = $bm_div(10000, g);\n                if (time >= curSeg && time < curSeg + fps * 4) {\n                    result = Math.abs(linear(time, curSeg, $bm_sum(curSeg, $bm_mul(fps, 4)), $bm_mul(squash, 0.5), 0));\n                }\n                if (time >= curSeg && time < curSeg + fps / 2) {\n                    squash = $bm_mul($bm_mul(squash, $bm_div(pos.speedAtTime($bm_sub(time, fps)), firstSpeed)), nb);\n                }\n                if (time >= total - fps && time <= total) {\n                    squash = fx('Squash Value');\n                    squash = $bm_mul($bm_mul(squash, $bm_div(pos.speedAtTime($bm_sub(time, fps)), firstSpeed)), nb);\n                    result = squash;\n                }\n                if (time >= total - fps * 2 && time <= total) {\n                    result = linear(time, $bm_sub(total, $bm_mul(fps, 2)), total, 0, squash);\n                }\n                if (nb >= nbg) {\n                    result = $bm_div(result, $bm_div(nb, nbg));\n                }\n                if (nb > 3) {\n                    result = 0;\n                }\n                result = clamp(result, 0, 60);\n                $bm_rt = result = $bm_mul(result, squashPower);\n            } else {\n                n > 1 ? curKey = pos.key(n).time : curKey = pos.key(pos.numKeys).time;\n                if (time >= $bm_sub(curKey, fps)) {\n                    result = $bm_mul(squash, 0.2);\n                    result = $bm_mul(result, squashPower);\n                }\n                result = clamp(result, 0, 60);\n                $bm_rt = $bm_sum($bm_sum(value, p), result);\n            }\n        } else {\n            $bm_rt = value;\n        }\n    } else {\n        $bm_rt = value;\n    }\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":100,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Squash-Down","np":14,"mn":"ADBE Geometry2","ix":6,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,500],"ix":1,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,500],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\nvar squash;\nsquash = $bm_sub(effect('(fx) Squash-Circle')('Scale Width'), 100);\n$bm_rt = $bm_sub(value, $bm_div(squash, 2));"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Bounce Duration","np":3,"mn":"ADBE Slider Control","ix":7,"en":1,"ef":[{"ty":0,"nm":"Slider","mn":"ADBE Slider Control-0001","ix":1,"v":{"a":0,"k":144,"ix":1,"x":"var $bm_rt;\nvar L, fx, fps, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, p, pos, lastKey, p, pos, lastKey, nMax, n, n, hitData, firstSpeed, curSpeed, t, v, vl, vu, vu, p, tCur, segDur, tNext, nb, squash, result, i, vl, segDur, tCur, tNext;\ntry {\n    L = thisLayer;\n    fx = L.effect('Bounce Settings');\n    fps = thisComp.frameDuration;\n    squash = fx('Squash Value');\n    switch (fx('Gravity Presets').value) {\n    case 1:\n        e = 0.6;\n        g = 3000;\n        squash = $bm_mul(squash, 1.4);\n        break;\n    case 2:\n        e = 0.6;\n        g = 4000;\n        squash = $bm_mul(squash, 1.2);\n        break;\n    case 3:\n        e = 0.5;\n        g = 5000;\n        squash = $bm_mul(squash, 1);\n        break;\n    case 4:\n        e = 0.45;\n        g = 7000;\n        squash = $bm_mul(squash, 0.7);\n        break;\n    case 5:\n        e = 0.4;\n        g = 10000;\n        squash = $bm_mul(squash, 0.4);\n        break;\n    default:\n        e = $bm_div(fx('Elasticity'), 10);\n        g = $bm_mul(fx('Gravity'), 1000);\n    }\n    try {\n        p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n        pos = L.transform.yPosition;\n        lastKey = transform.yPosition.key(transform.yPosition.numKeys).time;\n    } catch (e$$4) {\n        p = [\n            $bm_sum(fx('Position X'), fx('Offset X')),\n            $bm_sum(fx('Position Y'), fx('Offset Y'))\n        ];\n        pos = L.transform.position;\n        lastKey = pos.key(pos.numKeys).time;\n    }\n    nMax = fx('Max Bounce');\n    $bm_rt = n = 0;\n    if (pos.numKeys > 0) {\n        $bm_rt = n = pos.nearestKey(time).index;\n        if (pos.key(n).time > time)\n            n--;\n    }\n    if (n > 0 && fx('Enable') == 1) {\n        hitData = [];\n        firstSpeed = pos.speedAtTime(lastKey);\n        curSpeed = pos.speed;\n        t = $bm_sub(time, pos.key(n).time);\n        v = $bm_mul($bm_neg(pos.velocityAtTime($bm_sub(lastKey, 0.001))), e);\n        vl = length(v);\n        if ($bm_isInstanceOfArray(value)) {\n            vu = vl > 0 ? normalize(v) : [\n                0,\n                0,\n                0\n            ];\n        } else {\n            vu = v < 0 ? -1 : 1;\n            p = 0;\n        }\n        tCur = 0;\n        segDur = $bm_div($bm_mul(2, vl), g);\n        tNext = segDur;\n        nb = 1;\n        hitData.push(segDur);\n        squash = $bm_mul($bm_mul(squash, $bm_div(curSpeed, firstSpeed)), nb);\n        result = 0;\n        for (i = 1; i < nMax; i++) {\n            vl *= e;\n            segDur *= e;\n            tCur = tNext;\n            tNext = $bm_sum(tNext, segDur);\n            nb++;\n            hitData.push(segDur);\n        }\n        $bm_rt = $bm_sum(lastKey, tNext);\n    } else\n        $bm_rt = 0;\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-19.33],[19.33,0],[0,19.33],[-19.33,0]],"o":[[0,19.33],[-19.33,0],[0,-19.33],[19.33,0]],"v":[[35,0],[0,35],[-35,0],[0,-35]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.003921568627,0.20000001496,0.63137254902,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[35.25,35.25],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":600,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"Bol 1 Outlines","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0,"y":1},"o":{"x":0.167,"y":0},"t":0,"s":[118.63,256.479,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.433},"o":{"x":0.616,"y":0},"t":20,"s":[118.63,116.479,0],"to":[0,0,0],"ti":[0,0,0]},{"t":40,"s":[118.63,256.479,0]}],"ix":2,"x":"var $bm_rt;\nvar fx, e, g, e, g, e, g, e, g, e, g, e, g, pos, p, pos, p, fps, nMax, n, n, hitData, t, v, vl, vu, vu, tCur, segDur, tNext, nb, curSeg, curSeg, curSeg, curSeg, curSeg, curSeg, delta, res, curSeg;\ntry {\n    fx = effect('Bounce Settings');\n    switch (fx('Gravity Presets').value) {\n    case 1:\n        e = 0.6;\n        g = 3000;\n        break;\n    case 2:\n        e = 0.6;\n        g = 4000;\n        break;\n    case 3:\n        e = 0.5;\n        g = 5000;\n        break;\n    case 4:\n        e = 0.45;\n        g = 7000;\n        break;\n    case 5:\n        e = 0.4;\n        g = 10000;\n        break;\n    default:\n        e = $bm_div(fx('Elasticity'), 10);\n        g = $bm_mul(fx('Gravity'), 1000);\n    }\n    try {\n        pos = transform.yPosition;\n        p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n        pos.key(pos.numKeys).time;\n    } catch (e$$4) {\n        pos = transform.position;\n        p = [\n            $bm_sum(fx('Position X'), fx('Offset X')),\n            $bm_sum(fx('Position Y'), fx('Offset Y'))\n        ];\n    }\n    fps = thisComp.frameDuration;\n    nMax = fx('Max Bounce');\n    $bm_rt = n = 0;\n    if (numKeys > 0) {\n        $bm_rt = n = nearestKey(time).index;\n        if (key(n).time > time)\n            n--;\n    }\n    if (n > 0 && fx('Enable') == 1) {\n        hitData = [];\n        t = $bm_sub(time, key(n).time);\n        v = $bm_mul($bm_neg(velocityAtTime($bm_sub(key(n).time, 0.001))), e);\n        vl = length(v);\n        if ($bm_isInstanceOfArray(value)) {\n            vu = vl > 0 ? normalize(v) : [\n                0,\n                0,\n                0\n            ];\n        } else {\n            vu = v < 0 ? -1 : 1;\n        }\n        tCur = 0;\n        segDur = $bm_div($bm_mul(2, vl), g);\n        tNext = segDur;\n        nb = 1;\n        hitData.push(segDur);\n        if ($bm_mod(n, 2) == 0) {\n            n > 1 ? curSeg = $bm_sub(pos.key(n).time, 0.01) : curSeg = $bm_sub(pos.key(pos.numKeys).time, 0.01);\n        } else {\n            n > 1 ? curSeg = $bm_sub(pos.key($bm_sub(n, 1)).time, 0.01) : curSeg = $bm_sub(pos.key(pos.numKeys).time, 0.01);\n        }\n        while (tNext < t && nb <= nMax) {\n            vl *= e;\n            segDur *= e;\n            tCur = tNext;\n            tNext = $bm_sum(tNext, segDur);\n            nb++;\n            hitData.push(segDur);\n        }\n        if (nb <= nMax) {\n            delta = $bm_sub(t, tCur);\n            res = $bm_sum(p, $bm_mul($bm_mul(vu, delta), $bm_sub(vl, $bm_div($bm_mul(g, delta), 2))));\n            for (var i = 0; i < hitData.length - 1; i++) {\n                curSeg = $bm_sum(curSeg, hitData[i]);\n            }\n            $bm_rt = $bm_sum(value, res);\n        } else {\n            $bm_rt = $bm_sum(value, p);\n        }\n    } else {\n        $bm_rt = $bm_sum(value, p);\n    }\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"},"a":{"a":0,"k":[35.25,35.25,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"ef":[{"ty":5,"nm":"Bounce Settings","np":59,"mn":"Pseudo/0.08605332387367026","ix":1,"en":1,"ef":[{"ty":7,"nm":"Enable","mn":"Pseudo/0.08605332387367026-0001","ix":1,"v":{"a":0,"k":1,"ix":1}},{"ty":0,"nm":"Max Bounce","mn":"Pseudo/0.08605332387367026-0002","ix":2,"v":{"a":0,"k":2,"ix":2}},{"ty":7,"nm":"Gravity Presets","mn":"Pseudo/0.08605332387367026-0003","ix":3,"v":{"a":0,"k":5,"ix":3}},{"ty":6,"nm":"Custom Preset","mn":"Pseudo/0.08605332387367026-0004","ix":4,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/0.08605332387367026-0005","ix":5,"v":{"a":0,"k":4,"ix":5}},{"ty":0,"nm":"Gravity","mn":"Pseudo/0.08605332387367026-0006","ix":6,"v":{"a":0,"k":3,"ix":6}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0007","ix":7,"v":0},{"ty":6,"nm":"Squash & Stretch","mn":"Pseudo/0.08605332387367026-0008","ix":8,"v":0},{"ty":7,"nm":"On/Off ","mn":"Pseudo/0.08605332387367026-0009","ix":9,"v":{"a":0,"k":1,"ix":9}},{"ty":7,"nm":"Squash Type ","mn":"Pseudo/0.08605332387367026-0010","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Squash Value","mn":"Pseudo/0.08605332387367026-0011","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Stretch Type","mn":"Pseudo/0.08605332387367026-0012","ix":12,"v":{"a":0,"k":1,"ix":12}},{"ty":0,"nm":"Stretch Value","mn":"Pseudo/0.08605332387367026-0013","ix":13,"v":{"a":0,"k":40,"ix":13}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0014","ix":14,"v":0},{"ty":6,"nm":"Auto Rotate","mn":"Pseudo/0.08605332387367026-0015","ix":15,"v":0},{"ty":7,"nm":"On/Off","mn":"Pseudo/0.08605332387367026-0016","ix":16,"v":{"a":0,"k":1,"ix":16}},{"ty":7,"nm":"Reverse","mn":"Pseudo/0.08605332387367026-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":7,"nm":"Keep Rolling","mn":"Pseudo/0.08605332387367026-0018","ix":18,"v":{"a":0,"k":0,"ix":18}},{"ty":0,"nm":"Rotate Power","mn":"Pseudo/0.08605332387367026-0019","ix":19,"v":{"a":0,"k":10,"ix":19}},{"ty":0,"nm":"Offset ","mn":"Pseudo/0.08605332387367026-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0021","ix":21,"v":0},{"ty":6,"nm":"Transform","mn":"Pseudo/0.08605332387367026-0022","ix":22,"v":0},{"ty":0,"nm":"Position X","mn":"Pseudo/0.08605332387367026-0023","ix":23,"v":{"a":0,"k":0,"ix":23}},{"ty":0,"nm":"Position Y","mn":"Pseudo/0.08605332387367026-0024","ix":24,"v":{"a":0,"k":0,"ix":24}},{"ty":0,"nm":"Offset X","mn":"Pseudo/0.08605332387367026-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":0,"nm":"Offset Y","mn":"Pseudo/0.08605332387367026-0026","ix":26,"v":{"a":0,"k":0,"ix":26}},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0027","ix":27,"v":0},{"ty":6,"nm":"Help","mn":"Pseudo/0.08605332387367026-0028","ix":28,"v":0},{"ty":6,"nm":"It works best with small","mn":"Pseudo/0.08605332387367026-0029","ix":29,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0030","ix":30,"v":0},{"ty":6,"nm":"keyframe distance like 4 or 7","mn":"Pseudo/0.08605332387367026-0031","ix":31,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0032","ix":32,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0033","ix":33,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0034","ix":34,"v":0},{"ty":6,"nm":"For accurate calculations use","mn":"Pseudo/0.08605332387367026-0035","ix":35,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0036","ix":36,"v":0},{"ty":6,"nm":"linear keyframes for Y position","mn":"Pseudo/0.08605332387367026-0037","ix":37,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0038","ix":38,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0039","ix":39,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0040","ix":40,"v":0},{"ty":6,"nm":"The second squash type ","mn":"Pseudo/0.08605332387367026-0041","ix":41,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0042","ix":42,"v":0},{"ty":6,"nm":"doesn't work with shapes","mn":"Pseudo/0.08605332387367026-0043","ix":43,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0044","ix":44,"v":0},{"ty":6,"nm":"  ","mn":"Pseudo/0.08605332387367026-0045","ix":45,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0046","ix":46,"v":0},{"ty":6,"nm":"For more tools visit:","mn":"Pseudo/0.08605332387367026-0047","ix":47,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0048","ix":48,"v":0},{"ty":6,"nm":"www.motionape.com","mn":"Pseudo/0.08605332387367026-0049","ix":49,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0050","ix":50,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0051","ix":51,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0052","ix":52,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0053","ix":53,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0054","ix":54,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0055","ix":55,"v":0},{"ty":6,"nm":"","mn":"Pseudo/0.08605332387367026-0056","ix":56,"v":0},{"ty":6,"nm":"MoPack - Bounce","mn":"Pseudo/0.08605332387367026-0057","ix":57,"v":0}]},{"ty":5,"nm":"(fx) Auto-Rotate","np":14,"mn":"ADBE Geometry2","ix":2,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,250],"ix":1,"x":"var $bm_rt;\nfunction calCenter(h, g, d, j, i) {\n    if (g > d) {\n        var e = g;\n        g = d;\n        d = e;\n        e = j;\n        j = i;\n        i = e;\n    }\n    var f = $bm_div($bm_sub(h, g), $bm_sub(d, g));\n    return $bm_sum(j, $bm_mul($bm_sub(i, j), f));\n}\nfunction getSize(f, j, l) {\n    var i = f.sourceRectAtTime(l);\n    var h = i.top;\n    var e = i.left;\n    var k = $bm_sum(e, i.width);\n    var d = $bm_sum(h, i.height);\n    var g = [\n            calCenter(j[0], 0, 100, e, k),\n            calCenter(j[1], 0, 100, h, d)\n        ];\n    return f.toComp(g, l);\n}\n$bm_rt = getSize(thisLayer, [\n    50,\n    50\n], time);"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,250],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8,"x":"var $bm_rt;\nvar fx, fps, bounceDur, keepRoll, bounceDur, bounceDur, bounceDur, pos, prevKey, lastKey, lastVal, prevVal, posRef, pos, posRef, posRef, prevKey, lastKey, lastVal, prevVal, o, rev, o, onOff, dia, multi, p1, p2, p, p, p;\ntry {\n    fx = effect('Bounce Settings');\n    fps = thisComp.frameDuration;\n    bounceDur = effect('(fx) Bounce Duration')('Slider');\n    keepRoll = effect('Bounce Settings')('Keep Rolling').value;\n    keepRoll ? bounceDur = thisLayer.outPoint : bounceDur = bounceDur;\n    try {\n        pos = [\n            transform.xPosition,\n            transform.yPosition\n        ];\n        prevKey = transform.yPosition.key($bm_sub(transform.yPosition.numKeys, 1)).time;\n        lastKey = transform.yPosition.key(transform.yPosition.numKeys).time;\n        lastVal = transform.xPosition.valueAtTime(lastKey);\n        prevVal = transform.xPosition.valueAtTime(prevKey);\n        posRef = transform.xPosition.valueAtTime(bounceDur);\n    } catch (e$$4) {\n        pos = transform.position;\n        posRef = pos.valueAtTime(bounceDur);\n        posRef = posRef[0];\n        prevKey = pos.key(pos.numKeys).time;\n        lastKey = pos.key(pos.numKeys).time;\n        lastVal = pos.valueAtTime(prevKey);\n        prevVal = pos.valueAtTime(prevKey);\n    }\n    o = fx('Offset ');\n    rev = fx('Reverse').value;\n    if (rev)\n        o = $bm_neg(o);\n    $bm_rt = onOff = fx('On/Off').value;\n    if (onOff && fx('Enable').value && time < bounceDur) {\n        dia = 360;\n        multi = $bm_mul(effect('Bounce Settings')('Rotate Power'), 36);\n        p1 = $bm_mul($bm_div(pos[0], $bm_mul(Math.PI, dia)), multi);\n        p2 = $bm_mul($bm_div(posRef, $bm_mul(Math.PI, dia)), multi);\n        p = $bm_sub(p1, p2);\n        if (time >= prevKey && time <= lastKey) {\n            if (!keepRoll) {\n                if (prevVal !== lastVal) {\n                    p = $bm_sub(360, $bm_mul(p, linear(time, prevKey, lastKey, 0, 1)));\n                }\n            }\n        }\n        if (time < prevKey && !keepRoll) {\n            p = $bm_sum(value, o);\n        }\n        $bm_rt = !rev ? $bm_sum(p, o) : $bm_sum($bm_neg(p), o);\n    } else {\n        $bm_rt = onOff ? $bm_sum(value, o) : value;\n    }\n    ;\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Stretch-Scale","np":14,"mn":"ADBE Geometry2","ix":3,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,250],"ix":1,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,250],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Bounce Settings')('Stretch Type').value == 1 ? $bm_sum(value, effect('(fx) Stretch-Scale')('ADBE Geometry2-0006')) : value;"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\n$bm_rt = linear(effect('(fx) Stretch-Scale')('ADBE Geometry2-0003'), 100, 200, 100, 50);"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\nvar L, fx, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, pos, p, pos, p, lastKey, prevKey, fps, nMax, n, n, curSeg, curKey, hitData, firstSpeed, curSpeed, vel, velPrev, velNext, t, v, vl, vu, vu, p, tCur, segDur, tNext, nb, squash, result, delta, total, result, curSeg, result, result, result, result, result, result, result;\ntry {\n    L = thisLayer;\n    $bm_rt = fx = L.effect('Bounce Settings');\n    if (fx('Enable').value && fx('On/Off ').value) {\n        squash = $bm_mul(fx('Stretch Value'), 2);\n        switch (fx('Gravity Presets').value) {\n        case 1:\n            e = 0.6;\n            g = 3000;\n            squash = $bm_mul(squash, 2);\n            break;\n        case 2:\n            e = 0.6;\n            g = 4000;\n            squash = $bm_mul(squash, 1.5);\n            break;\n        case 3:\n            e = 0.5;\n            g = 5000;\n            squash = $bm_mul(squash, 1);\n            break;\n        case 4:\n            e = 0.45;\n            g = 7000;\n            squash = $bm_mul(squash, 0.8);\n            break;\n        case 5:\n            e = 0.4;\n            g = 10000;\n            squash = $bm_mul(squash, 0.6);\n            break;\n        default:\n            e = $bm_div(fx('Elasticity'), 10);\n            g = $bm_mul(fx('Gravity'), 1000);\n        }\n        try {\n            pos = transform.yPosition;\n            p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n            pos.key(pos.numKeys).time;\n        } catch (e$$4) {\n            pos = transform.position;\n            p = [\n                $bm_sum(fx('Position X'), fx('Offset X')),\n                $bm_sum(fx('Position Y'), fx('Offset Y'))\n            ];\n        }\n        lastKey = pos.key(pos.numKeys).time;\n        prevKey = pos.key($bm_sub(pos.numKeys, 1)).time;\n        fps = thisComp.frameDuration;\n        nMax = fx('Max Bounce');\n        $bm_rt = n = 0;\n        if (pos.numKeys > 0) {\n            $bm_rt = n = pos.nearestKey(time).index;\n            if (pos.key(n).time > time)\n                n--;\n        }\n        if (n > 0) {\n            curSeg = pos.key(n).time;\n            curKey = pos.key(n).time;\n            hitData = [];\n            firstSpeed = pos.speedAtTime($bm_sub(lastKey, fps));\n            curSpeed = Math.abs(pos.speed);\n            vel = pos.velocity;\n            velPrev = pos.velocityAtTime($bm_sub(time, fps));\n            velNext = pos.velocityAtTime($bm_sum(time, fps));\n            t = $bm_sub(time, pos.key(n).time);\n            v = $bm_mul($bm_neg(pos.velocityAtTime($bm_sub(lastKey, 0.001))), e);\n            function isArray(p) {\n                try {\n                    var dummyVar = p[1];\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            }\n            vl = length(v);\n            if ($bm_isInstanceOfArray(value)) {\n                vu = vl > 0 ? normalize(v) : [\n                    0,\n                    0,\n                    0\n                ];\n            } else {\n                vu = v < 0 ? -1 : 1;\n                p = 0;\n            }\n            tCur = 0;\n            segDur = $bm_div($bm_mul(2, vl), g);\n            tNext = segDur;\n            nb = 1;\n            hitData.push(segDur);\n            squash = $bm_mul($bm_mul(squash, $bm_div(curSpeed, firstSpeed)), nb);\n            result = 0;\n            while (tNext < t && nb <= nMax) {\n                vl *= e;\n                segDur *= e;\n                tCur = tNext;\n                tNext = $bm_sum(tNext, segDur);\n                nb++;\n                hitData.push(segDur);\n            }\n            if (nb <= nMax) {\n                delta = $bm_sub(t, tCur);\n                total = $bm_sum(curKey, 0.01);\n                result = 0;\n                for (var i = 0; i < hitData.length; i++) {\n                    var total = $bm_sum(total, hitData[i]);\n                }\n                for (var i = 0; i < hitData.length - 1; i++) {\n                    curSeg = $bm_sum(curSeg, hitData[i]);\n                }\n                if (time > curSeg && time < curSeg + segDur / 2) {\n                    result = linear(time, curSeg, $bm_sum(curSeg, $bm_div(segDur, 2)), squash, 0);\n                }\n                if (time > curSeg + segDur / 2 && time < total - fps) {\n                    result = linear(time, $bm_sum(curSeg, $bm_div(segDur, 2)), $bm_sub(total, fps), 0, squash);\n                }\n                if (time > total - fps * 3 && time < total - fps) {\n                    result = linear(time, $bm_sub(total, $bm_mul(fps, 3)), $bm_sub(total, fps), result, 0);\n                }\n                if (time > prevKey && time <= lastKey - fps * 2) {\n                    result = linear(time, prevKey, $bm_sub(lastKey, $bm_mul(fps, 2)), 0, squash);\n                }\n                if (time >= lastKey - fps * 2 && time < lastKey) {\n                    result = linear(time, $bm_sub(lastKey, $bm_mul(fps, 2)), lastKey, squash, 0);\n                }\n                result = $bm_div(result, nb);\n                result = clamp(result, 0, 60);\n                $bm_rt = $bm_sum(value, result);\n            } else {\n                $bm_rt = $bm_sum(value, p);\n            }\n        } else {\n            $bm_rt = value;\n        }\n    } else {\n        $bm_rt = value;\n    }\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":100,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Stretch-Echo","np":7,"mn":"ADBE Echo","ix":4,"en":1,"ef":[{"ty":0,"nm":"Echo Time (seconds)","mn":"ADBE Echo-0001","ix":1,"v":{"a":0,"k":0,"ix":1,"x":"var $bm_rt;\nvar n, v, s, fps, s, fps, p, t, p, t, t, p, v;\nn = effect('(fx) Stretch-Echo')('Number Of Echoes');\nv = linear(n, 0, 10, 0.0005, 0.005);\ns = effect('(fx) Stretch-Scale')('Skew Axis');\nfps = thisComp.frameDuration;\nif (s < 0) {\n    s = $bm_neg(s);\n    fps = 0;\n}\ntry {\n    p = transform.yPosition;\n    t = p.valueAtTime($bm_sub(time, fps));\n} catch (err) {\n    p = transform.position;\n    t = p.valueAtTime($bm_sub(time, fps));\n    t = t[1];\n    p = p[1];\n}\nv = linear(s, 0, 60, 0, v);\n$bm_rt = t > p ? v : -v;"}},{"ty":0,"nm":"Number Of Echoes","mn":"ADBE Echo-0002","ix":2,"v":{"a":0,"k":9,"ix":2,"x":"var $bm_rt;\nvar L, fx, v, s, d, v, s, v;\nL = thisLayer;\nfx = L.effect('Bounce Settings');\nv = $bm_div(effect('Bounce Settings')('Stretch Value'), 5);\ns = effect('(fx) Stretch-Scale')('Skew Axis');\n$bm_rt = d = effect('(fx) Squash-Circle')('Skew Axis');\nif (s < 0) {\n    v = v;\n    $bm_rt = s = $bm_neg(s);\n}\nif (fx('Enable').value && fx('On/Off ').value && fx('Stretch Type') == 2) {\n    v = linear(d, 0, 60, v, 0);\n    $bm_rt = linear(s, 0, 30, 0, v);\n} else {\n    $bm_rt = 0;\n}"}},{"ty":0,"nm":"Starting Intensity","mn":"ADBE Echo-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":0,"nm":"Decay","mn":"ADBE Echo-0004","ix":4,"v":{"a":0,"k":1,"ix":4}},{"ty":7,"nm":"Echo Operator","mn":"ADBE Echo-0005","ix":5,"v":{"a":0,"k":2,"ix":5}}]},{"ty":5,"nm":"(fx) Squash-Circle","np":14,"mn":"ADBE Geometry2","ix":5,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,250],"ix":1,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,250],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Bounce Settings')('Squash Type ') == 1 ? $bm_sum(value, effect('(fx) Squash-Circle')('ADBE Geometry2-0006')) : value;"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\nvar L, fx, squashPower, squash, e, g, e, g, e, g, e, g, e, g, squash, e, g, pos, p, pos, p, lastKey, prevKey, fps, nMax, n, n, curSeg, curSeg, curSeg, hitData, curKey, curKey, curKey, curKey, curKey, curKey, firstSpeed, curSpeed, vel, velPrev, velNext, t, v, vl, vu, vu, p, tCur, segDur, tNext, nb, squash, result, ignore, delta, total, curSeg, y1, y2, y3, y3, ignore, ignore, ignore, result, nbg, result, squash, squash, squash, result, result, result, result, result, result, curKey, curKey, curKey, result, result, result;\ntry {\n    L = thisLayer;\n    $bm_rt = fx = L.effect('Bounce Settings');\n    if (fx('Enable').value && fx('On/Off ').value) {\n        squashPower = $bm_div(effect('Bounce Settings')('Squash Value'), 100);\n        squash = 200;\n        switch (fx('Gravity Presets').value) {\n        case 1:\n            e = 0.6;\n            g = 3000;\n            break;\n        case 2:\n            e = 0.6;\n            g = 4000;\n            break;\n        case 3:\n            e = 0.5;\n            g = 5000;\n            break;\n        case 4:\n            e = 0.45;\n            g = 7000;\n            break;\n        case 5:\n            e = 0.4;\n            g = 10000;\n            squash = squash;\n            break;\n        default:\n            e = $bm_div(fx('Elasticity'), 10);\n            g = $bm_mul(fx('Gravity'), 1000);\n        }\n        try {\n            pos = transform.yPosition;\n            p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n            pos.key(pos.numKeys).time;\n        } catch (e$$4) {\n            pos = transform.position;\n            p = [\n                $bm_sum(fx('Position X'), fx('Offset X')),\n                $bm_sum(fx('Position Y'), fx('Offset Y'))\n            ];\n        }\n        lastKey = pos.key(pos.numKeys).time;\n        prevKey = pos.key($bm_sub(pos.numKeys, 1)).time;\n        fps = thisComp.frameDuration;\n        nMax = fx('Max Bounce');\n        $bm_rt = n = 0;\n        if (pos.numKeys > 0) {\n            $bm_rt = n = pos.nearestKey(time).index;\n            if (pos.key(n).time > time)\n                n--;\n        }\n        if (n > 0 && n % 2 == 0) {\n            n > 1 ? curSeg = pos.key(n).time : curSeg = 0;\n            hitData = [];\n            if ($bm_mod(n, 2) == 0) {\n                n > 1 ? curKey = pos.key(n).time : curKey = pos.key(pos.numKeys).time;\n            } else {\n                n > 1 ? curKey = pos.key($bm_sub(n, 1)).time : curKey = pos.key(pos.numKeys).time;\n            }\n            firstSpeed = pos.speedAtTime($bm_sub(curKey, fps));\n            curSpeed = pos.speed;\n            vel = pos.velocity;\n            velPrev = pos.velocityAtTime($bm_sub(time, fps));\n            velNext = pos.velocityAtTime($bm_sum(time, fps));\n            t = $bm_sub(time, pos.key(n).time);\n            v = $bm_mul($bm_neg(pos.velocityAtTime($bm_sub(pos.key(n).time, 0.001))), e);\n            function isArray(p) {\n                try {\n                    var dummyVar = p[1];\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            }\n            vl = length(v);\n            if ($bm_isInstanceOfArray(value)) {\n                vu = vl > 0 ? normalize(v) : [\n                    0,\n                    0,\n                    0\n                ];\n            } else {\n                vu = v < 0 ? -1 : 1;\n                p = 0;\n            }\n            tCur = 0;\n            segDur = $bm_div($bm_mul(2, vl), g);\n            tNext = segDur;\n            nb = 1;\n            hitData.push(segDur);\n            squash = $bm_mul($bm_mul(squash, $bm_div(curSpeed, firstSpeed)), nb);\n            result = 0;\n            ignore = 1;\n            while (tNext < t && nb <= nMax) {\n                vl *= e;\n                segDur *= e;\n                tCur = tNext;\n                tNext = $bm_sum(tNext, segDur);\n                nb++;\n                hitData.push(segDur);\n            }\n            if (nb <= nMax) {\n                delta = $bm_sub(t, tCur);\n                for (var i = 0; i < hitData.length; i++) {\n                    total = $bm_sum(curKey, hitData[i]);\n                }\n                for (var i = 0; i < hitData.length - 1; i++) {\n                    curSeg = $bm_sum(curSeg, hitData[i]);\n                }\n                if (n > 1) {\n                    y1 = pos.key(n);\n                    y2 = pos.key($bm_sub(n, 1));\n                    try {\n                        y3 = pos.key($bm_sum(n, 1));\n                    } catch (err) {\n                        y3 = y2;\n                    }\n                    ;\n                    y1 < y2 ? ignore = 0 : ignore = 1;\n                }\n                result = 0;\n                nbg = $bm_div(10000, g);\n                if (time >= curSeg && time < curSeg + fps * 4) {\n                    result = Math.abs(linear(time, curSeg, $bm_sum(curSeg, $bm_mul(fps, 4)), $bm_mul(squash, 0.5), 0));\n                }\n                if (time >= curSeg && time < curSeg + fps / 2) {\n                    squash = $bm_mul($bm_mul(squash, $bm_div(pos.speedAtTime($bm_sub(time, fps)), firstSpeed)), nb);\n                }\n                if (time >= total - fps && time <= total) {\n                    squash = fx('Squash Value');\n                    squash = $bm_mul($bm_mul(squash, $bm_div(pos.speedAtTime($bm_sub(time, fps)), firstSpeed)), nb);\n                    result = squash;\n                }\n                if (time >= total - fps * 2 && time <= total) {\n                    result = linear(time, $bm_sub(total, $bm_mul(fps, 2)), total, 0, squash);\n                }\n                if (nb >= nbg) {\n                    result = $bm_div(result, $bm_div(nb, nbg));\n                }\n                if (nb > 3) {\n                    result = 0;\n                }\n                result = clamp(result, 0, 60);\n                $bm_rt = result = $bm_mul(result, squashPower);\n            } else {\n                n > 1 ? curKey = pos.key(n).time : curKey = pos.key(pos.numKeys).time;\n                if (time >= $bm_sub(curKey, fps)) {\n                    result = $bm_mul(squash, 0.2);\n                    result = $bm_mul(result, squashPower);\n                }\n                result = clamp(result, 0, 60);\n                $bm_rt = $bm_sum($bm_sum(value, p), result);\n            }\n        } else {\n            $bm_rt = value;\n        }\n    } else {\n        $bm_rt = value;\n    }\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":100,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Squash-Down","np":14,"mn":"ADBE Geometry2","ix":6,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[250,500],"ix":1,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[250,500],"ix":2,"x":"var $bm_rt;\n$bm_rt = effect('(fx) Auto-Rotate')('ADBE Geometry2-0001');"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\nvar squash;\nsquash = $bm_sub(effect('(fx) Squash-Circle')('Scale Width'), 100);\n$bm_rt = $bm_sub(value, $bm_div(squash, 2));"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]},{"ty":5,"nm":"(fx) Bounce Duration","np":3,"mn":"ADBE Slider Control","ix":7,"en":1,"ef":[{"ty":0,"nm":"Slider","mn":"ADBE Slider Control-0001","ix":1,"v":{"a":0,"k":144,"ix":1,"x":"var $bm_rt;\nvar L, fx, fps, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, squash, e, g, p, pos, lastKey, p, pos, lastKey, nMax, n, n, hitData, firstSpeed, curSpeed, t, v, vl, vu, vu, p, tCur, segDur, tNext, nb, squash, result, i, vl, segDur, tCur, tNext;\ntry {\n    L = thisLayer;\n    fx = L.effect('Bounce Settings');\n    fps = thisComp.frameDuration;\n    squash = fx('Squash Value');\n    switch (fx('Gravity Presets').value) {\n    case 1:\n        e = 0.6;\n        g = 3000;\n        squash = $bm_mul(squash, 1.4);\n        break;\n    case 2:\n        e = 0.6;\n        g = 4000;\n        squash = $bm_mul(squash, 1.2);\n        break;\n    case 3:\n        e = 0.5;\n        g = 5000;\n        squash = $bm_mul(squash, 1);\n        break;\n    case 4:\n        e = 0.45;\n        g = 7000;\n        squash = $bm_mul(squash, 0.7);\n        break;\n    case 5:\n        e = 0.4;\n        g = 10000;\n        squash = $bm_mul(squash, 0.4);\n        break;\n    default:\n        e = $bm_div(fx('Elasticity'), 10);\n        g = $bm_mul(fx('Gravity'), 1000);\n    }\n    try {\n        p = $bm_sum(fx('Position Y'), fx('Offset Y'));\n        pos = L.transform.yPosition;\n        lastKey = transform.yPosition.key(transform.yPosition.numKeys).time;\n    } catch (e$$4) {\n        p = [\n            $bm_sum(fx('Position X'), fx('Offset X')),\n            $bm_sum(fx('Position Y'), fx('Offset Y'))\n        ];\n        pos = L.transform.position;\n        lastKey = pos.key(pos.numKeys).time;\n    }\n    nMax = fx('Max Bounce');\n    $bm_rt = n = 0;\n    if (pos.numKeys > 0) {\n        $bm_rt = n = pos.nearestKey(time).index;\n        if (pos.key(n).time > time)\n            n--;\n    }\n    if (n > 0 && fx('Enable') == 1) {\n        hitData = [];\n        firstSpeed = pos.speedAtTime(lastKey);\n        curSpeed = pos.speed;\n        t = $bm_sub(time, pos.key(n).time);\n        v = $bm_mul($bm_neg(pos.velocityAtTime($bm_sub(lastKey, 0.001))), e);\n        vl = length(v);\n        if ($bm_isInstanceOfArray(value)) {\n            vu = vl > 0 ? normalize(v) : [\n                0,\n                0,\n                0\n            ];\n        } else {\n            vu = v < 0 ? -1 : 1;\n            p = 0;\n        }\n        tCur = 0;\n        segDur = $bm_div($bm_mul(2, vl), g);\n        tNext = segDur;\n        nb = 1;\n        hitData.push(segDur);\n        squash = $bm_mul($bm_mul(squash, $bm_div(curSpeed, firstSpeed)), nb);\n        result = 0;\n        for (i = 1; i < nMax; i++) {\n            vl *= e;\n            segDur *= e;\n            tCur = tNext;\n            tNext = $bm_sum(tNext, segDur);\n            nb++;\n            hitData.push(segDur);\n        }\n        $bm_rt = $bm_sum(lastKey, tNext);\n    } else\n        $bm_rt = 0;\n} catch (e$$4) {\n    $bm_rt = value = value;\n}"}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-19.33],[19.33,0],[0,19.33],[-19.33,0]],"o":[[0,19.33],[-19.33,0],[0,-19.33],[19.33,0]],"v":[[35,0],[0,35],[-35,0],[0,-35]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.003921568627,0.20000001496,0.63137254902,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[35.25,35.25],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":600,"st":0,"bm":0}],"markers":[]}